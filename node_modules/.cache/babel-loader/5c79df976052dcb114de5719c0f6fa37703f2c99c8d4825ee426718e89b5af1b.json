{"ast":null,"code":"import Chart1 from './components/Chart1.vue';\nimport Chart2 from './components/Chart2.vue';\nimport Chart3 from './components/Chart3.vue';\nimport axios from \"axios\";\nexport default {\n  name: 'App',\n  data() {\n    return {\n      keyword: \"\",\n      display: false,\n      country: \"\",\n      city: \"\",\n      currentTime: \"\",\n      timeArray: [],\n      temperatureArray: [],\n      windArray: [],\n      rainArray: [],\n      rainFlagWithDate: {}\n    };\n  },\n  methods: {\n    getForecast: function () {\n      if (this.keyword === \"\") {\n        console.log(\"emp\");\n        return;\n      }\n      console.log(this.keyword);\n      axios.post('http://localhost:3000/sendData', {\n        keyword: this.keyword\n      }).then(response => {\n        console.log(response.data);\n        this.forecast(response.data);\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    forecast: function (data) {\n      this.display = true;\n      const city = data.city_country[0];\n      const country = data.city_country[1];\n      this.city = city;\n      this.country = country;\n      const time_data = data.current_time;\n      this.currentTime = time_data.datetime;\n      const timezone_id = time_data.timezone_location;\n      let temperatureArray = [];\n      let windArray = [];\n      let rainArray = [];\n      let timeArray = [];\n      let rainFlagWithDate = {};\n      let datetimeArray = [];\n      for (let i = 0; i < data.list.length; i++) {\n        const UTCDatetime = data.list[i].dt_txt;\n        const year = UTCDatetime.substr(0, 4);\n        const month = UTCDatetime.substr(5, 2);\n        const day = UTCDatetime.substr(8, 2);\n        const hour = UTCDatetime.substr(11, 2);\n        const minute = UTCDatetime.substr(14, 2);\n        const second = UTCDatetime.substr(17, 2);\n        const d = new Date(Date.UTC(year, month - 1, day, hour, minute, second));\n        let localDatetime = d.toLocaleString(\"en-IE\", {\n          timeZone: timezone_id,\n          hour12: true,\n          month: \"short\",\n          day: \"2-digit\",\n          hour: \"2-digit\"\n        });\n        localDatetime = localDatetime.replaceAll(\".\", \"\");\n        datetimeArray[i] = localDatetime;\n        let datetimeForX = localDatetime.substring(8);\n        if (datetimeForX === \"00 am\" || datetimeForX === \"01 am\" || datetimeForX === \"02 am\") {\n          datetimeForX = localDatetime.substring(0, 6);\n        } else {\n          if (datetimeForX === \"00 pm\") {\n            datetimeForX = \"12 pm\";\n          }\n          datetimeForX = datetimeForX.replace(\" \", \"\");\n          let position = datetimeForX.search(\"0\");\n          if (position === 0) {\n            datetimeForX = datetimeForX.replace(\"0\", \"\");\n          }\n        }\n        timeArray[i] = datetimeForX;\n        let date = localDatetime.substring(0, 6);\n        rainFlagWithDate[date] = false;\n        const temprature = data.list[i].main.temp;\n        temperatureArray[i] = temprature;\n        const windSpeed = data.list[i].wind.speed;\n        windArray[i] = windSpeed;\n        if (\"rain\" in data.list[i]) {\n          const rainfall = data.list[i].rain[\"3h\"];\n          rainArray[i] = rainfall;\n        } else {\n          const rainfall = 0;\n          rainArray[i] = rainfall;\n        }\n      }\n      this.temperatureArray = temperatureArray;\n      this.windArray = windArray;\n      this.rainArray = rainArray;\n      this.timeArray = timeArray;\n      for (let p = 0; p < rainArray.length; p++) {\n        const rain = rainArray[p];\n        if (rain > 0) {\n          let datetime = datetimeArray[p];\n          let date = datetime.substring(0, 6);\n          rainFlagWithDate[date] = true;\n        }\n      }\n      this.rainFlagWithDate = rainFlagWithDate;\n\n      // let date\n      // for(let q = 0; q < data.air_pollution.list.length; q++) {\n\n      // }\n    }\n  },\n\n  components: {\n    Chart1,\n    Chart2,\n    Chart3\n  }\n};","map":{"version":3,"names":["Chart1","Chart2","Chart3","axios","name","data","keyword","display","country","city","currentTime","timeArray","temperatureArray","windArray","rainArray","rainFlagWithDate","methods","getForecast","console","log","post","then","response","forecast","catch","error","city_country","time_data","current_time","datetime","timezone_id","timezone_location","datetimeArray","i","list","length","UTCDatetime","dt_txt","year","substr","month","day","hour","minute","second","d","Date","UTC","localDatetime","toLocaleString","timeZone","hour12","replaceAll","datetimeForX","substring","replace","position","search","date","temprature","main","temp","windSpeed","wind","speed","rainfall","rain","p","components"],"sources":["/Users/SonodaMoeto/Desktop/Internet Application/vue-express/vue-express-sample/src/App.vue"],"sourcesContent":["<template>\n  <h1>Weather Forecast App</h1>\n  <form action>\n      <input type=\"text\" placeholder=\"type in a city name\" v-model=\"keyword\">\n      <input type=\"submit\" value=\"Go!\" @click.prevent=\"getForecast\" />\n  </form>\n\n  <span :class=\"{data : !display}\">\n      <h2>{{city}}({{country}})</h2>\n      <h3>Current Local Time: {{currentTime}}</h3>\n  </span>\n  <span :class=\"{data : !display}\">\n    <p>Temperature(Â°C)</p>\n  </span>\n  <Chart1 :temperatureArray=\"temperatureArray\" :timeArray=\"timeArray\" :display=\"display\"/>\n  <span :class=\"{data : !display}\">\n    <p>Wind Speed(meter/sec)</p>\n  </span>\n  <Chart2 :windArray=\"windArray\" :timeArray=\"timeArray\" :display=\"display\"/>\n  <span :class=\"{data : !display}\">\n    <p>Rain Volume(mm/3h)</p>\n  </span>\n  <Chart3 :rainArray=\"rainArray\" :rainFlagWithDate=\"rainFlagWithDate\" :timeArray=\"timeArray\" :display=\"display\"/>\n  \n</template>\n\n<script>\nimport Chart1 from './components/Chart1.vue'\nimport Chart2 from './components/Chart2.vue'\nimport Chart3 from './components/Chart3.vue'\nimport axios from \"axios\"\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      keyword: \"\",\n      display: false,\n      country: \"\",\n      city: \"\",\n      currentTime: \"\",\n      timeArray: [],\n      temperatureArray: [],\n      windArray: [],\n      rainArray: [],\n      rainFlagWithDate: {}\n    }\n  },\n  methods: {\n    getForecast: function() {\n      if(this.keyword === \"\")\n      {\n          console.log(\"emp\")\n          return\n      }\n      console.log(this.keyword)\n      axios.post('http://localhost:3000/sendData', { keyword: this.keyword })\n      .then(response => {\n          console.log(response.data)\n          this.forecast(response.data)\n      })\n      .catch(error => {\n          console.error(error)\n      })\n    },\n    forecast: function(data) {\n      this.display = true\n      const city = data.city_country[0]\n      const country = data.city_country[1]\n      this.city = city\n      this.country = country\n      \n      const time_data = data.current_time\n      this.currentTime = time_data.datetime\n\n      const timezone_id = time_data.timezone_location\n      let temperatureArray = []\n      let windArray = []\n      let rainArray = []\n      let timeArray = []\n      let rainFlagWithDate = {}\n      let datetimeArray = []\n      for(let i = 0; i < data.list.length; i++)\n      {\n          const UTCDatetime = data.list[i].dt_txt\n          const year = UTCDatetime.substr(0, 4)\n          const month = UTCDatetime.substr(5, 2)\n          const day = UTCDatetime.substr(8, 2)\n          const hour = UTCDatetime.substr(11, 2)\n          const minute = UTCDatetime.substr(14, 2)\n          const second = UTCDatetime.substr(17, 2)\n          const d = new Date(Date.UTC(year, month - 1, day, hour, minute, second))\n          let localDatetime = d.toLocaleString(\"en-IE\", { timeZone: timezone_id,  hour12: true, month: \"short\", day: \"2-digit\", hour: \"2-digit\"})\n          localDatetime = localDatetime.replaceAll(\".\", \"\")\n\n          datetimeArray[i] = localDatetime\n\n          let datetimeForX = localDatetime.substring(8)\n          if(datetimeForX === \"00 am\" || datetimeForX === \"01 am\" || datetimeForX === \"02 am\")\n          {\n            datetimeForX = localDatetime.substring(0, 6)\n          }\n          else {\n            if(datetimeForX === \"00 pm\")\n            {\n              datetimeForX = \"12 pm\"\n            }\n            datetimeForX = datetimeForX.replace(\" \", \"\")\n            let position = datetimeForX.search(\"0\")\n            if(position === 0) {\n              datetimeForX = datetimeForX.replace(\"0\", \"\")\n            }\n          }\n          timeArray[i] = datetimeForX\n          let date = localDatetime.substring(0, 6)\n          rainFlagWithDate[date] = false\n\n          const temprature = data.list[i].main.temp\n          temperatureArray[i] = temprature\n\n          const windSpeed = data.list[i].wind.speed\n          windArray[i] = windSpeed\n\n          if(\"rain\" in data.list[i]) {\n            const rainfall = data.list[i].rain[\"3h\"]\n            rainArray[i] = rainfall\n          }\n          else {\n            const rainfall = 0\n            rainArray[i] = rainfall\n          }\n      }\n      this.temperatureArray = temperatureArray\n      this.windArray = windArray\n      this.rainArray = rainArray\n      this.timeArray = timeArray\n\n      for(let p = 0; p < rainArray.length; p++) {\n        const rain = rainArray[p]\n        if(rain > 0) {\n          let datetime = datetimeArray[p]\n          let date = datetime.substring(0, 6)\n          rainFlagWithDate[date] = true\n        }\n      }\n      this.rainFlagWithDate = rainFlagWithDate\n\n      // let date\n      // for(let q = 0; q < data.air_pollution.list.length; q++) {\n\n      // }\n    }\n  },\n  components: {\n    Chart1,\n    Chart2,\n    Chart3\n  }\n}\n</script>\n\n<style>\n#app span.data {\n  display: none;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
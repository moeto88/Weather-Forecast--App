{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Weather Forecast App\", -1);\nconst _hoisted_2 = {\n  action: \"\"\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Temperature(°C)\", -1);\nconst _hoisted_4 = [_hoisted_3];\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Wind Speed(meter/sec)\", -1);\nconst _hoisted_6 = [_hoisted_5];\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Rain Volume(mm/3h)\", -1);\nconst _hoisted_8 = [_hoisted_7];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Chart1 = _resolveComponent(\"Chart1\");\n  const _component_Chart2 = _resolveComponent(\"Chart2\");\n  const _component_Chart3 = _resolveComponent(\"Chart3\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"form\", _hoisted_2, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    placeholder: \"type in a city name\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.keyword = $event)\n  }, null, 512), [[_vModelText, $data.keyword]]), _createElementVNode(\"input\", {\n    type: \"submit\",\n    value: \"Go!\",\n    onClick: _cache[1] || (_cache[1] = _withModifiers((...args) => $options.getForecast && $options.getForecast(...args), [\"prevent\"]))\n  })]), _createElementVNode(\"span\", {\n    class: _normalizeClass({\n      data: !$data.display\n    })\n  }, [_createElementVNode(\"h2\", null, _toDisplayString($data.city) + \"(\" + _toDisplayString($data.country) + \")\", 1), _createElementVNode(\"h3\", null, \"Current Local Time: \" + _toDisplayString($data.currentTime), 1)], 2), _createElementVNode(\"span\", {\n    class: _normalizeClass({\n      data: !$data.display\n    })\n  }, _hoisted_4, 2), _createVNode(_component_Chart1, {\n    temperatureArray: $data.temperatureArray,\n    timeArray: $data.timeArray,\n    display: $data.display\n  }, null, 8, [\"temperatureArray\", \"timeArray\", \"display\"]), _createElementVNode(\"span\", {\n    class: _normalizeClass({\n      data: !$data.display\n    })\n  }, _hoisted_6, 2), _createVNode(_component_Chart2, {\n    windArray: $data.windArray,\n    timeArray: $data.timeArray,\n    display: $data.display\n  }, null, 8, [\"windArray\", \"timeArray\", \"display\"]), _createElementVNode(\"span\", {\n    class: _normalizeClass({\n      data: !$data.display\n    })\n  }, _hoisted_8, 2), _createVNode(_component_Chart3, {\n    rainArray: $data.rainArray,\n    rainFlagWithDate: $data.rainFlagWithDate,\n    timeArray: $data.timeArray,\n    display: $data.display\n  }, null, 8, [\"rainArray\", \"rainFlagWithDate\", \"timeArray\", \"display\"])], 64);\n}","map":{"version":3,"names":["_createElementVNode","action","_hoisted_3","_hoisted_5","_hoisted_7","_hoisted_1","_hoisted_2","type","placeholder","$data","keyword","$event","value","onClick","_cache","_withModifiers","args","$options","getForecast","class","_normalizeClass","data","display","_toDisplayString","city","country","currentTime","_createVNode","_component_Chart1","temperatureArray","timeArray","_component_Chart2","windArray","_component_Chart3","rainArray","rainFlagWithDate"],"sources":["/Users/SonodaMoeto/Desktop/Internet Application/vue-express/vue-express-sample/src/App.vue"],"sourcesContent":["<template>\n  <h1>Weather Forecast App</h1>\n  <form action>\n      <input type=\"text\" placeholder=\"type in a city name\" v-model=\"keyword\">\n      <input type=\"submit\" value=\"Go!\" @click.prevent=\"getForecast\" />\n  </form>\n\n  <span :class=\"{data : !display}\">\n      <h2>{{city}}({{country}})</h2>\n      <h3>Current Local Time: {{currentTime}}</h3>\n  </span>\n  <span :class=\"{data : !display}\">\n    <p>Temperature(°C)</p>\n  </span>\n  <Chart1 :temperatureArray=\"temperatureArray\" :timeArray=\"timeArray\" :display=\"display\"/>\n  <span :class=\"{data : !display}\">\n    <p>Wind Speed(meter/sec)</p>\n  </span>\n  <Chart2 :windArray=\"windArray\" :timeArray=\"timeArray\" :display=\"display\"/>\n  <span :class=\"{data : !display}\">\n    <p>Rain Volume(mm/3h)</p>\n  </span>\n  <Chart3 :rainArray=\"rainArray\" :rainFlagWithDate=\"rainFlagWithDate\" :timeArray=\"timeArray\" :display=\"display\"/>\n  \n</template>\n\n<script>\nimport Chart1 from './components/Chart1.vue'\nimport Chart2 from './components/Chart2.vue'\nimport Chart3 from './components/Chart3.vue'\nimport axios from \"axios\"\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      keyword: \"\",\n      display: false,\n      country: \"\",\n      city: \"\",\n      currentTime: \"\",\n      timeArray: [],\n      temperatureArray: [],\n      windArray: [],\n      rainArray: [],\n      rainFlagWithDate: {}\n    }\n  },\n  methods: {\n    getForecast: function() {\n      if(this.keyword === \"\")\n      {\n          console.log(\"emp\")\n          return\n      }\n      console.log(this.keyword)\n      axios.post('http://localhost:3000/sendData', { keyword: this.keyword })\n      .then(response => {\n          console.log(response.data)\n          this.forecast(response.data)\n      })\n      .catch(error => {\n          console.error(error)\n      })\n    },\n    forecast: function(data) {\n      this.display = true\n      const city = data.city_country[0]\n      const country = data.city_country[1]\n      this.city = city\n      this.country = country\n      \n      const time_data = data.current_time\n      this.currentTime = time_data.datetime\n\n      const timezone_id = time_data.timezone_location\n      let temperatureArray = []\n      let windArray = []\n      let rainArray = []\n      let timeArray = []\n      let rainFlagWithDate = {}\n      let datetimeArray = []\n      for(let i = 0; i < data.list.length; i++)\n      {\n          const UTCDatetime = data.list[i].dt_txt\n          const year = UTCDatetime.substr(0, 4)\n          const month = UTCDatetime.substr(5, 2)\n          const day = UTCDatetime.substr(8, 2)\n          const hour = UTCDatetime.substr(11, 2)\n          const minute = UTCDatetime.substr(14, 2)\n          const second = UTCDatetime.substr(17, 2)\n          const d = new Date(Date.UTC(year, month - 1, day, hour, minute, second))\n          let localDatetime = d.toLocaleString(\"en-IE\", { timeZone: timezone_id,  hour12: true, month: \"short\", day: \"2-digit\", hour: \"2-digit\"})\n          localDatetime = localDatetime.replaceAll(\".\", \"\")\n\n          datetimeArray[i] = localDatetime\n\n          let datetimeForX = localDatetime.substring(8)\n          if(datetimeForX === \"00 am\" || datetimeForX === \"01 am\" || datetimeForX === \"02 am\") {\n            datetimeForX = localDatetime.substring(0, 6)\n          }\n          else {\n            if(datetimeForX === \"00 pm\") {\n              datetimeForX = \"12 pm\"\n            }\n            datetimeForX = datetimeForX.replace(\" \", \"\")\n            let position = datetimeForX.search(\"0\")\n            if(position === 0) {\n              datetimeForX = datetimeForX.replace(\"0\", \"\")\n            }\n          }\n          timeArray[i] = datetimeForX\n          let date = localDatetime.substring(0, 6)\n          rainFlagWithDate[date] = false\n\n          const temprature = data.list[i].main.temp\n          temperatureArray[i] = temprature\n\n          const windSpeed = data.list[i].wind.speed\n          windArray[i] = windSpeed\n\n          if(\"rain\" in data.list[i]) {\n            const rainfall = data.list[i].rain[\"3h\"]\n            rainArray[i] = rainfall\n          }\n          else {\n            const rainfall = 0\n            rainArray[i] = rainfall\n          }\n      }\n      this.temperatureArray = temperatureArray\n      this.windArray = windArray\n      this.rainArray = rainArray\n      this.timeArray = timeArray\n\n      for(let p = 0; p < rainArray.length; p++) {\n        const rain = rainArray[p]\n        if(rain > 0) {\n          let datetime = datetimeArray[p]\n          let date = datetime.substring(0, 6)\n          rainFlagWithDate[date] = true\n        }\n      }\n      this.rainFlagWithDate = rainFlagWithDate\n\n      let dateArrayForAirPollution = []\n      for(let q = 0; q < data.air_pollution.list.length; q++) {\n        const unix = data.air_pollution.list[q].dt\n        const d = new Date(unix * 1000)\n        let localDatetime = d.toLocaleString(\"en-IE\", { timeZone: timezone_id,  hour12: true, month: \"short\", day: \"2-digit\", hour: \"2-digit\"})\n        localDatetime = localDatetime.replaceAll(\".\", \"\")\n        let datetimeForX = localDatetime.substring(8)\n        if(datetimeForX === \"00 am\" || datetimeForX === \"01 am\" || datetimeForX === \"02 am\") {\n          datetimeForX = localDatetime.substring(0, 6)\n        }\n        else {\n          if(datetimeForX === \"00 pm\") {\n            datetimeForX = \"12 pm\"\n          }\n          datetimeForX = datetimeForX.replace(\" \", \"\")\n          let position = datetimeForX.search(\"0\")\n          if(position === 0) {\n            datetimeForX = datetimeForX.replace(\"0\", \"\")\n          }\n        }\n        dateArrayForAirPollution[q] = datetimeForX\n      }\n      console.log(dateArrayForAirPollution)\n    }\n  },\n  components: {\n    Chart1,\n    Chart2,\n    Chart3\n  }\n}\n</script>\n\n<style>\n#app span.data {\n  display: none;\n}\n</style>\n"],"mappings":";gCACEA,mBAAA,CAA6B,YAAzB,sBAAoB;;EAClBC,MAAM,EAAN;AAAM;gCAUVD,mBAAA,CAAsB,WAAnB,iBAAe;oBAAlBE,UAAsB,C;gCAItBF,mBAAA,CAA4B,WAAzB,uBAAqB;oBAAxBG,UAA4B,C;gCAI5BH,mBAAA,CAAyB,WAAtB,oBAAkB;oBAArBI,UAAyB,C;;;;;6DAnB3BC,UAA6B,EAC7BL,mBAAA,CAGO,QAHPM,UAGO,G,gBAFHN,mBAAA,CAAuE;IAAhEO,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC,qBAAqB;+DAAUC,KAAA,CAAAC,OAAO,GAAAC,MAAA;gCAAPF,KAAA,CAAAC,OAAO,E,GACrEV,mBAAA,CAAgE;IAAzDO,IAAI,EAAC,QAAQ;IAACK,KAAK,EAAC,KAAK;IAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,cAAA,KAAAC,IAAA,KAAUC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;QAGhEhB,mBAAA,CAGO;IAHAmB,KAAK,EAAAC,eAAA;MAAAC,IAAA,GAAWZ,KAAA,CAAAa;IAAO;MAC1BtB,mBAAA,CAA8B,YAAAuB,gBAAA,CAAxBd,KAAA,CAAAe,IAAI,IAAE,GAAC,GAAAD,gBAAA,CAAEd,KAAA,CAAAgB,OAAO,IAAE,GAAC,MACzBzB,mBAAA,CAA4C,YAAxC,sBAAoB,GAAAuB,gBAAA,CAAEd,KAAA,CAAAiB,WAAW,M,MAEzC1B,mBAAA,CAEO;IAFAmB,KAAK,EAAAC,eAAA;MAAAC,IAAA,GAAWZ,KAAA,CAAAa;IAAO;qBAG9BK,YAAA,CAAwFC,iBAAA;IAA/EC,gBAAgB,EAAEpB,KAAA,CAAAoB,gBAAgB;IAAGC,SAAS,EAAErB,KAAA,CAAAqB,SAAS;IAAGR,OAAO,EAAEb,KAAA,CAAAa;6DAC9EtB,mBAAA,CAEO;IAFAmB,KAAK,EAAAC,eAAA;MAAAC,IAAA,GAAWZ,KAAA,CAAAa;IAAO;qBAG9BK,YAAA,CAA0EI,iBAAA;IAAjEC,SAAS,EAAEvB,KAAA,CAAAuB,SAAS;IAAGF,SAAS,EAAErB,KAAA,CAAAqB,SAAS;IAAGR,OAAO,EAAEb,KAAA,CAAAa;sDAChEtB,mBAAA,CAEO;IAFAmB,KAAK,EAAAC,eAAA;MAAAC,IAAA,GAAWZ,KAAA,CAAAa;IAAO;qBAG9BK,YAAA,CAA+GM,iBAAA;IAAtGC,SAAS,EAAEzB,KAAA,CAAAyB,SAAS;IAAGC,gBAAgB,EAAE1B,KAAA,CAAA0B,gBAAgB;IAAGL,SAAS,EAAErB,KAAA,CAAAqB,SAAS;IAAGR,OAAO,EAAEb,KAAA,CAAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}